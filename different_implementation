#!/usr/bin/py
from __future__ import division
from math import sqrt
from operator import add
from heapq import heappush, heappop
import numpy as np
from operator import itemgetter
def printTransactions(m, k, d, name, owned, prices):
    def info(price):
        # normalized_price = price / np.linalg.norm(price)
        normalized_price=price
        weights=[0.2,0.4,0.6,0.8]
        s_avg,l_avg=0,0
        for i in range(3,len(price)):
            s_avg+=(normalized_price[i]-normalized_price[i-1])/normalized_price[i-1]*weights[i-1]
        for i in range(1,len(price)):
            l_avg+=(normalized_price[i]-normalized_price[i-1])/normalized_price[i-1]*weights[i-1]
        
        return s_avg/1.4-l_avg/2
    res = []
    drop = []
    for i in range(k):
        cur_info = info(prices[i])
    

        if cur_info > 0 and owned[i] > 0:
            res.append((name[i], 'SELL', str(owned[i])))
        elif cur_info < 0:
            drop.append({'value':cur_info,'index':i ,'name':name[i]})

    newlist = sorted(drop, key=itemgetter('value'))
    for i in range(0,len(newlist)):
        idx, n=newlist[i]['index'],newlist[i]['name']
        amount = int(m / prices[idx][-1])
        if amount  > 0:
            res.append((n, 'BUY', str(amount)))
            m -= amount * prices[idx][-1]
    
    print len(res)
    for r in res:
        print ' '.join(r)
        
if __name__ == '__main__':
    m, k, d = [float(i) for i in raw_input().strip().split()]
    k = int(k)
    d = int(d)
    names = []
    owned = []
    prices = []
    for data in range(k):
        temp = raw_input().strip().split()
        names.append(temp[0])
        owned.append(int(temp[1]))
        prices.append([float(i) for i in temp[2:7]])

    printTransactions(m, k, d, names, owned, prices)
